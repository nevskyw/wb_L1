package main

import "fmt"

type Human struct {
	name string
	age  int
}

type Action struct {
	email string
	phone string
	Human
}

func main() {
	one := Action{
		email: "yana.yzndex.ru",
		phone: "+7-999-006-55-55",
		Human: Human{
			name: "Yana",
			age:  22,
		},
	}
	// теперь можно обращаться конкретно к `one`и вытаскивать значения
	one.email = "yana.yzndex.ru"
	one.phone = "+7-999-006-55-55"

	fmt.Println(one)
	fmt.Println(one.email)
	fmt.Println(one.phone)

	// более упрощенная запись 2-го пользователя
	two := Human{"Sanya", 15}
	act := Action{"sanya.mail.ru", "+7-999-555-55-59", two}

	fmt.Println(two)
	fmt.Println(act)
}

/*

Структуры в Golang - это возможность создавать определяемый пользователем тип данных из
группы полей данных с разными типами данных. Поле данных в структуре может быть объявлено
со встроенными или определяемыми пользователем типами данных. Концепцию структуры можно сравнить
с объектно-ориентированным программированием, которое поддерживает композицию, но не наследование.

*/

//Встраивание не должно:
/*
-Быть чисто косметическим или ориентированным на удобство.

-Делать внешние типы более сложными для создания или использования.

-Влиять на нулевые значения внешних типов. Если внешний тип имеет полезное нулевое значение,
он все равно должен иметь полезное нулевое значение после внедрения внутреннего типа.

-Предоставлять несвязанные функции или поля внешнего типа в качестве побочного эффекта внедрения внутреннего типа.

-Выставлять неэкспортированные типы.

-Влиять на семантику копирования внешних типов.

-Изменять API внешнего типа или семантику типа.

-Вставлять неканоническую форму внутреннего типа.

Раскрывать детали реализации внешнего типа.

Разрешать пользователям наблюдать или контролировать внутренние элементы типа.

Изменять общее поведение внутренних функций с помощью обертки таким образом,
чтобы это могло удивить пользователей.*/
